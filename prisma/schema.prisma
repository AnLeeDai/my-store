// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL") // uses Prisma Accelerate
  directUrl = env("POSTGRES_URL") // uses direct connection
}

// Categories table
model Category {
  id          Int       @id @default(autoincrement()) @map("category_id")
  name        String    @map("category_name")
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isActive    Boolean   @default(true) @map("is_active")

  // Relations
  products    Product[]

  @@map("categories")
}

// Users table
model User {
  id                Int       @id @default(autoincrement()) @map("user_id")
  username          String    @unique
  password          String
  fullName          String?   @map("full_name")
  email             String?
  phoneNumber       String?   @map("phone_number")
  address           String?
  avatarUrl         String?   @map("avatar_url")
  passwordChangedAt DateTime? @map("password_changed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  role              Role      @default(USER)
  isActive          Boolean   @default(true) @map("is_active")

  // Relations
  carts   Cart[]
  orders  Order[]

  @@map("users")
}

// Products table
model Product {
  id               Int      @id @default(autoincrement())
  name             String   @map("product_name")
  price            Float    @default(0.00)
  thumbnail        String?
  shortDescription String?  @map("short_description")
  fullDescription  String?  @map("full_description")
  extraInfo        String?  @map("extra_info")
  inStock          Int      @default(0) @map("in_stock")
  brand            String?
  categoryId       Int?     @map("category_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  isActive         Boolean  @default(true) @map("is_active")

  // Relations
  category     Category?      @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  images       ProductImage[]
  cartItems    CartItem[]
  orderItems   OrderItem[]

  @@map("products")
}

// Product images table
model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  imageUrl  String   @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("product_images")
}

// Banners table
model Banner {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("banners")
}

// Password requests table
model PasswordRequest {
  id          Int                    @id @default(autoincrement())
  email       String
  newPassword String                 @map("new_password")
  username    String
  status      PasswordRequestStatus  @default(PENDING)
  createdAt   DateTime               @default(now()) @map("created_at")

  @@map("password_requests")
}

// Carts table
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  status    CartStatus @default(PENDING)

  // Relations
  user  User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

// Cart items table
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int      @map("cart_id")
  productId Int      @map("product_id")
  quantity  Int      @default(1)
  price     Float    @default(0.00)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("cart_items")
}

// Orders table
model Order {
  id              Int         @id @default(autoincrement())
  userId          Int         @map("user_id")
  totalPrice      Float       @default(0.00) @map("total_price")
  status          OrderStatus @default(PENDING)
  shippingAddress String?     @map("shipping_address")
  paymentMethod   String      @default("bank_transfer") @map("payment_method")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  user  User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

// Order items table
model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int   @map("order_id")
  productId Int   @map("product_id")
  quantity  Int   @default(1)
  price     Float @default(0.00)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("order_items")
}

// Enums
enum Role {
  ADMIN @map("admin")
  USER  @map("user")

  @@map("role")
}

enum PasswordRequestStatus {
  PENDING  @map("pending")
  DONE     @map("done")
  REJECTED @map("rejected")

  @@map("password_request_status")
}

enum CartStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")

  @@map("cart_status")
}

enum OrderStatus {
  PENDING   @map("pending")
  DELIVERED @map("delivered")
  COMPLETED @map("completed")
  CANCELLED @map("cancelled")

  @@map("order_status")
}
